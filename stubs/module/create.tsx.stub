import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
{{DynamicImports}}
import { usePageActions } from '@/contexts/page-context';
import { zodResolver } from '@hookform/resolvers/zod';
import { Head, Link, router } from '@inertiajs/react';
import React, { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import * as z from 'zod';
import { BreadcrumbItem } from '@/types';

export default function Create() {
    const { t } = useTranslation();
    const { setBreadcrumbs } = usePageActions();

    const breadcrumbs: BreadcrumbItem[] = React.useMemo(
        () => [
            {
                title: '{{PluralTitleCase}}',
                count: 2,
                href: route('{{plural_kebab_name}}.index'),
            },
            {
                title: t('Create'),
                href: route('{{plural_kebab_name}}.create'),
            },
        ],
        [t]
    );

    useEffect(() => {
        setBreadcrumbs(breadcrumbs);
    }, [breadcrumbs, setBreadcrumbs]);

    const formSchema = z.object({
        {{ZodSchemaFields}}
    });

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            {{FormDefaultValues}}
        },
    });

    function onSubmit(values: z.infer<typeof formSchema>) {
        router.post(route('{{plural_kebab_name}}.store'), values);
    }

    return (
        <>
            <Head title={t('Create {{SingularUcfirst}}')} />

            <div className="max-w-4xl">
                <Card>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)}>
                            <CardContent className="space-y-6 pt-6">
                                {{FormFields}}
                            </CardContent>

                            <CardFooter className="flex flex-row-reverse justify-between gap-2 pt-2">
                                <Button type="submit">{t('Create')}</Button>
                                <Button variant="ghost" type="button" asChild>
                                    <Link href={route('{{plural_kebab_name}}.index')}>{t('Cancel')}</Link>
                                </Button>
                            </CardFooter>
                        </form>
                    </Form>
                </Card>
            </div>
        </>
    );
}
