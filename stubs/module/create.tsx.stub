import { Button } from '@/components/ui/button';
import { Card, CardContent, CardFooter } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { usePageActions } from '@/contexts/page-context';
import { zodResolver } from '@hookform/resolvers/zod';
import { Head, Link, router } from '@inertiajs/react';
import React, { useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { useTranslation } from 'react-i18next';
import * as z from 'zod';
import { BreadcrumbItem } from '@/types';

export default function Create() {
    const { t } = useTranslation();
    const { setBreadcrumbs } = usePageActions();

    const breadcrumbs: BreadcrumbItem[] = React.useMemo(
        () => [
            {
                title: '{{SingularUcfirst}}',
                count: 2,
                href: route('{{pluralSlug}}.index'),
            },
            {
                title: t('Create'),
                href: route('{{pluralSlug}}.create'),
            },
        ],
        [t],
    );

    useEffect(() => {
        setBreadcrumbs(breadcrumbs);
    }, [breadcrumbs, setBreadcrumbs]);

    const formSchema = z.object({
        name: z.string().min(1, { message: t('The name field is required.') }),
        // Add your fields here
    });

    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: '',
            // Add your default values here
        },
    });

    function onSubmit(values: z.infer<typeof formSchema>) {
        router.post(route('{{pluralSlug}}.store'), values);
    }

    return (
        <>
            <Head title={t('Create {{SingularUcfirst}}')} />

            <div className="max-w-4xl">
                <Card>
                    <Form {...form}>
                        <form onSubmit={form.handleSubmit(onSubmit)}>
                            <CardContent className="space-y-6 pt-6">
                                <FormField
                                    control={form.control}
                                    name="name"
                                    render={({ field }) => (
                                        <FormItem className="col-span-2 md:col-span-1">
                                            <FormLabel>{t('Name')}</FormLabel>
                                            <FormControl>
                                                <Input {...field} autoFocus />
                                            </FormControl>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />

                                {/* Add your form fields here */}
                            </CardContent>

                            <CardFooter className="flex flex-row-reverse justify-between gap-2 pt-2">
                                <Button type="submit">{t('Create')}</Button>
                                <Button variant="ghost" type="button" asChild>
                                    <Link href={route('{{pluralSlug}}.index')}>{t('Cancel')}</Link>
                                </Button>
                            </CardFooter>
                        </form>
                    </Form>
                </Card>
            </div>
        </>
    );
}
